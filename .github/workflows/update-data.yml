name: Update repo stats

on:
  workflow_dispatch:
  repository_dispatch:
    types: update_data

jobs:
  update_data:
    name: Update repo stats
    runs-on: ubuntu-latest
    steps:
      - name: Query GitHub GraphQL API
        id: GH_GQL_QUERY
        uses: octokit/graphql-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          query: |
            query repo_stats($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                stargazerCount
                pullRequests(states: OPEN) {
                  totalCount
                }
                issues(states: OPEN) {
                  totalCount
                }
              }
            }
          owner: ${{ secrets.REPOSITORY_OWNER }}
          repo: ${{ secrets.REPOSITORY_NAME }}
      - name: Log results
        run: |
          echo "Issue count: ${{ fromJSON(steps.GH_GQL_QUERY.outputs.data).repository.issues.totalCount }}"
          echo "Pull request count: ${{ fromJSON(steps.GH_GQL_QUERY.outputs.data).repository.pullRequests.totalCount }}"
          echo "Stargazer count: ${{ fromJSON(steps.GH_GQL_QUERY.outputs.data).repository.stargazerCount }}"
      - name: Upload data to MongoDB
        uses: krassdanke/mongosh-command-action@v1.1
        env:
          issueCount: ${{ fromJSON(steps.GH_GQL_QUERY.outputs.data).repository.issues.totalCount }}
          pullRequestCount: ${{ fromJSON(steps.GH_GQL_QUERY.outputs.data).repository.pullRequests.totalCount }}
          stargazerCount: ${{ fromJSON(steps.GH_GQL_QUERY.outputs.data).repository.stargazerCount }}
        with:
          connectionString: ${{ secrets.MONGODB_CONNECTION_STRING }}
          snippet: "let res = db['github-repo-stats'].insertOne({timestamp: new Date(), openIssues: process.env.issueCount, openPrs: process.env.pullRequestCount, stars: process.env.stargazerCount}); console.log(res);"
